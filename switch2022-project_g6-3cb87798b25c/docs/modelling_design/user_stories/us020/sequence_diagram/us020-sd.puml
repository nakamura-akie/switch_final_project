@startuml

skinparam sequenceMessageAlign center
skinparam actorBackgroundColor white
skinparam participantBackgroundColor white
skinparam sequenceReferenceBackgroundColor white
skinparam sequenceReferenceHeaderBackgroundColor white
skinparam sequenceGroupBackgroundColor white

autonumber

title US020 - As a Team Member, I want to add a user story in the product backlog to the sprint backlog, during the sprint planning ceremony

actor ":Team Member" as Team_Member
participant ":SprintBacklogUI" as UI
participant "<<Controller>>\n:SprintBacklogController" as Controller
participant "<<Service>>\n:SprintService" as Service
participant "<<ValueObject>>\n<<DomainID>>\nuserStoryID\n:UserStoryID" as UserStoryID
participant "<<ValueObject>>\n<<DomainID>>\nsprintID\n:SprintID" as SprintID
participant "<<Interface>>\n<<Repository>>\n:ProjectRepository" as ProjectRepo
participant "<<Interface>>\n<<Repository>>\n:UserStoryRepository" as UserStoryRepo
participant "<<Interface>>\n<<Repository>>\n:SprintRepository" as SprintRepo
participant "<<Entity>>\n<<Aggregate Root>>\nsprint\n:Sprint" as Sprint
participant "<<Entity>>\n:SprintBacklog" as SprintBacklog
participant "userStoryCodeList\n:List<UserStoryID>" as List
participant ":SprintDomainDataAssembler" as Assembler
participant "<<Interface>>\n<<Repository>>\n:SprintRepositoryJPA" as JPARepo
participant ":OutputSprintAssembler" as BacklogAssembler

Team_Member -> UI++ : requests to add user story in the product backlog\n to the sprint backlog
UI -> Controller++ : addUserStoryToSprintBacklog\n(projectCode, sprintCode, newUserStoryDTO)
Controller -> Service++ : addUserStoryToSprintBacklog\n(projectCode, sprintCode, newUserStoryDTO)
create UserStoryID
Service -> UserStoryID : create(projectCode, newUserStoryDTO.userStoryCode)
create SprintID
Service -> SprintID : create(projectCode, sprintCode)
Service -> ProjectRepo++ : existsById(projectCode)
return true/false
Service -> UserStoryRepo++ : existsByUserStoryIdAndUserStoryStatusNotAndUserStoryStatusNot\n(userStoryID, Status.FINISHED, Status.CANCELLED)
return true/false
Service -> SprintRepo++ : findBySprintIdAndSprintStatusLike\n(sprintID, SprintStatus.OPENED)
return sprint
Service -> Sprint++ : addToSprintBacklog(userStoryID)
Sprint -> SprintBacklog++ : addUserStory(userStoryID)
create List
SprintBacklog -> List : create()
SprintBacklog -> List : add(userStoryID)
return true/false
return true/false
Service -> SprintRepo++ : save(sprint)
SprintRepo -> Assembler++ : toData(sprint)
return sprintJPA
SprintRepo -> JPARepo++ : save(sprintJPA)
return savedSprintJPA
SprintRepo -> Assembler++ : toDomain(savedSprintJPA)
return updatedSprint
return updatedSprint
Service -> BacklogAssembler++ : generateDTO(updatedSprint)
return outputSprintDTO
return outputSprintDTO
return outputSprintDTO
return returns successful/unsuccessful

@enduml